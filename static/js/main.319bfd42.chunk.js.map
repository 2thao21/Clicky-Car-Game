{"version":3,"sources":["images sync /^/.*$","images/2019-Mustang-GT350.png","images/2019-corvette-zr1.png","images/2020-Toyota-Supra.png","images/AlfaRomeo-Giulia-Quadrifoglio.png","images/Audi-RS5.png","images/BMW-M4.png","images/Chevrolet-Camaro-ZL1.png","images/Infiniti-Q60.png","images/Jaguar-F-Type.png","images/Lexus-RCF.png","images/MercedesBenz-S63-AMG.png","images/Porsche-911.png","images/RaceTrack.jpg","components/Nav/Nav.js","components/Header/Header.js","components/Card/Card.js","App.js","serviceWorker.js","index.js"],"names":["map","./2019-Mustang-GT350.png","./2019-corvette-zr1.png","./2020-Toyota-Supra.png","./AlfaRomeo-Giulia-Quadrifoglio.png","./Audi-RS5.png","./BMW-M4.png","./Chevrolet-Camaro-ZL1.png","./Infiniti-Q60.png","./Jaguar-F-Type.png","./Lexus-RCF.png","./MercedesBenz-S63-AMG.png","./Porsche-911.png","./RaceTrack.jpg","webpackContext","req","id","webpackContextResolve","__webpack_require__","e","Error","code","keys","Object","resolve","module","exports","p","Nav","react_default","a","createElement","className","this","props","score","Component","Header","Card","onClick","imageClick","alt","image","replace","src","require","App","state","car","clickedCar","event","currentCar","target","_this","indexOf","setState","sort","b","Math","random","alert","concat","_this2","components_Nav_Nav","components_Header_Header","components_Card_Card","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+nBAAA,IAAAA,EAAA,CACAC,2BAAA,GACAC,0BAAA,GACAC,0BAAA,GACAC,sCAAA,GACAC,iBAAA,GACAC,eAAA,GACAC,6BAAA,GACAC,qBAAA,GACAC,sBAAA,GACAC,kBAAA,GACAC,6BAAA,GACAC,oBAAA,GACAC,kBAAA,IAIA,SAAAC,EAAAC,GACA,IAAAC,EAAAC,EAAAF,GACA,OAAAG,EAAAF,GAEA,SAAAC,EAAAF,GACA,IAAAC,EAAAhB,EAAAe,GACA,KAAAC,EAAA,IACA,IAAAG,EAAA,IAAAC,MAAA,uBAAAL,EAAA,KAEA,MADAI,EAAAE,KAAA,mBACAF,EAEA,OAAAH,EAEAF,EAAAQ,KAAA,WACA,OAAAC,OAAAD,KAAAtB,IAEAc,EAAAU,QAAAP,EACAQ,EAAAC,QAAAZ,EACAA,EAAAE,GAAA,oBCnCAS,EAAAC,QAAiBR,EAAAS,EAAuB,gECAxCF,EAAAC,QAAiBR,EAAAS,EAAuB,+DCAxCF,EAAAC,QAAiBR,EAAAS,EAAuB,+DCAxCF,EAAAC,QAAiBR,EAAAS,EAAuB,2ECAxCF,EAAAC,QAAiBR,EAAAS,EAAuB,sDCAxCF,EAAAC,QAAiBR,EAAAS,EAAuB,oDCAxCF,EAAAC,QAAiBR,EAAAS,EAAuB,kECAxCF,EAAAC,QAAiBR,EAAAS,EAAuB,0DCAxCF,EAAAC,QAAiBR,EAAAS,EAAuB,2DCAxCF,EAAAC,QAAiBR,EAAAS,EAAuB,uDCAxCF,EAAAC,QAAiBR,EAAAS,EAAuB,kECAxCF,EAAAC,QAAiBR,EAAAS,EAAuB,yDCAxCF,EAAAC,QAAiBR,EAAAS,EAAuB,4KCiBzBC,0LAZX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0CACZH,EAAAC,EAAAC,cAAA,UACCF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAAd,eACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,4BACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,eAAuCC,KAAKC,MAAMC,gBAP1CC,cCMHC,SANA,kBACdR,EAAAC,EAAAC,cAAA,UAAQC,UAAY,UACnBH,EAAAC,EAAAC,cAAA,2CACAF,EAAAC,EAAAC,cAAA,oKCMaO,SARF,SAAAJ,GAAK,OAChBL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOO,QAASL,EAAMM,YACnCX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKU,IAAKP,EAAMQ,MAAMC,QAAQ,OAAQ,IAAKC,IAAKC,MAAQ,KAAkBX,EAAMQ,oBC6EvEI,oNA1EbC,MAAQ,CACNC,MACAC,WAAY,GACZd,MAAO,KAITK,WAAa,SAAAU,GACX,IAAIC,EAAaD,EAAME,OAAOX,IAE5BY,EAAKN,MAAME,WAAWK,QAAQH,IAAe,GAI7CE,EAAKE,SAAS,CACZP,IAAKK,EAAKN,MAAMC,IAAIQ,KAAK,SAAS1B,EAAG2B,GACnC,MAAO,GAAMC,KAAKC,WAEpBV,WAAY,GACZd,MAAO,IAEPyB,MAAM,0BAIRP,EAAKE,SACH,CACEP,IAAKK,EAAKN,MAAMC,IAAIQ,KAAK,SAAS1B,EAAG2B,GACnC,MAAO,GAAMC,KAAKC,WAEpBV,WAAYI,EAAKN,MAAME,WAAWY,OAChCV,GAEFhB,MAAOkB,EAAKN,MAAMZ,MAAQ,GAG5B,WAC2B,KAArBkB,EAAKN,MAAMZ,QACbyB,MAAM,6BACNP,EAAKE,SAAS,CACZP,IAAKK,EAAKN,MAAMC,IAAIQ,KAAK,SAAS1B,EAAG2B,GACnC,MAAO,GAAMC,KAAKC,WAEpBV,WAAY,GACZd,MAAO,gFASV,IAAA2B,EAAA7B,KACP,OACEJ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACgC,EAAD,CACE5B,MAAOF,KAAKc,MAAMZ,QAEpBN,EAAAC,EAAAC,cAACiC,EAAD,MACAnC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACZC,KAAKc,MAAMC,IAAIhD,IAAI,SAAAgD,GAAG,OACrBnB,EAAAC,EAAAC,cAACkC,EAAD,CACEzB,WAAYsB,EAAKtB,WACjBxB,GAAIgC,EAAIhC,GACRkD,IAAKlB,EAAIhC,GACT0B,MAAOM,EAAIN,mBAnEPN,cCGE+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.319bfd42.chunk.js","sourcesContent":["var map = {\n\t\"./2019-Mustang-GT350.png\": 20,\n\t\"./2019-corvette-zr1.png\": 21,\n\t\"./2020-Toyota-Supra.png\": 22,\n\t\"./AlfaRomeo-Giulia-Quadrifoglio.png\": 23,\n\t\"./Audi-RS5.png\": 24,\n\t\"./BMW-M4.png\": 25,\n\t\"./Chevrolet-Camaro-ZL1.png\": 26,\n\t\"./Infiniti-Q60.png\": 27,\n\t\"./Jaguar-F-Type.png\": 28,\n\t\"./Lexus-RCF.png\": 29,\n\t\"./MercedesBenz-S63-AMG.png\": 30,\n\t\"./Porsche-911.png\": 31,\n\t\"./RaceTrack.jpg\": 32\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 19;","module.exports = __webpack_public_path__ + \"static/media/2019-Mustang-GT350.ac3a5bb2.png\";","module.exports = __webpack_public_path__ + \"static/media/2019-corvette-zr1.21758923.png\";","module.exports = __webpack_public_path__ + \"static/media/2020-Toyota-Supra.2017e2d8.png\";","module.exports = __webpack_public_path__ + \"static/media/AlfaRomeo-Giulia-Quadrifoglio.018091ad.png\";","module.exports = __webpack_public_path__ + \"static/media/Audi-RS5.01b52e18.png\";","module.exports = __webpack_public_path__ + \"static/media/BMW-M4.b06c65f6.png\";","module.exports = __webpack_public_path__ + \"static/media/Chevrolet-Camaro-ZL1.6787b72c.png\";","module.exports = __webpack_public_path__ + \"static/media/Infiniti-Q60.7e0fc78a.png\";","module.exports = __webpack_public_path__ + \"static/media/Jaguar-F-Type.3b2f0f14.png\";","module.exports = __webpack_public_path__ + \"static/media/Lexus-RCF.2e141f3c.png\";","module.exports = __webpack_public_path__ + \"static/media/MercedesBenz-S63-AMG.78d3d3ce.png\";","module.exports = __webpack_public_path__ + \"static/media/Porsche-911.53b5e7ac.png\";","module.exports = __webpack_public_path__ + \"static/media/RaceTrack.e883a9b5.jpg\";","import React, { Component } from \"react\";\r\nimport \"./Nav.css\";\r\n\r\nclass Nav extends Component {\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar navbar-default navbar-fixed-top\">\r\n         <ul>\r\n          <li className=\"itemLeft\">Try it out!</li>\r\n          <li className=\"itemCenter\">Click an Image to begin!</li>\r\n          <li className=\"itemRight\">Scoreboard: {this.props.score}</li>\r\n        </ul>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Nav;","import React from \"react\";\r\nimport \"./Header.css\";\r\n\r\nconst Header = () => (\r\n\t<header className = \"header\">\r\n\t\t<h3>Clicky Car Memorization Game!</h3>\r\n\t\t<h4>Click on an image to earn a point, do not click on the same image more than once, otherwise game will restart. To win, select all images only once.</h4>\r\n\t</header>\r\n);\r\nexport default Header;","import React from \"react\";\r\nimport \"./Card.css\";\r\n\r\n//pass the image into each card so all 12 images are rendered\r\nconst Card = props => (\r\n  <div className=\"card\" onClick={props.imageClick}>\r\n    <div className=\"img-container\">\r\n      <img alt={props.image.replace(\".png\", \"\")} src={require(\"../../images/\" + props.image)} />\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Card;","//imports dependencies and files\nimport React, { Component } from \"react\";\nimport Nav from \"./components/Nav\";\nimport Header from \"./components/Header\";\nimport Card from \"./components/Card\";\nimport car from \"./cars.json\";\nimport \"./App.css\";\n\n//sets state to 0 or empty\nclass App extends Component {\n  state = {\n    car,\n    clickedCar: [],\n    score: 0\n  };\n\n//when you click on an image... the car is taken out of the array\n  imageClick = event => {\n    var currentCar = event.target.alt;\n    var CarAlreadyClicked =\n      this.state.clickedCar.indexOf(currentCar) > -1;\n\n//if you click on a car that has already been selected, the game resets and images reordered\n    if (CarAlreadyClicked) {\n      this.setState({\n        car: this.state.car.sort(function(a, b) {\n          return 0.5 - Math.random();\n        }),\n        clickedCar: [],\n        score: 0\n      });\n        alert(\"You lose. Play again?\");\n\n//if you click on an available car, your score is increased and images reordered\n    } else {\n      this.setState(\n        {\n          car: this.state.car.sort(function(a, b) {\n            return 0.5 - Math.random();\n          }),\n          clickedCar: this.state.clickedCar.concat(\n            currentCar\n          ),\n          score: this.state.score + 1\n        },\n//if you select all 12 images correctly, congrats, you won and the game resets        \n        () => {\n          if (this.state.score === 12) {\n            alert(\"Congratulations, You Win!\");\n            this.setState({\n              car: this.state.car.sort(function(a, b) {\n                return 0.5 - Math.random();\n              }),\n              clickedCar: [],\n              score: 0\n            });\n          }\n        }\n      );\n    }\n  };\n\n//the order of components being rendered: nav, header, card\n  render() {\n    return (\n      <div>\n        <Nav\n          score={this.state.score}\n        />\n        <Header />\n        <div className=\"wrapper\">\n          {this.state.car.map(car => (\n            <Card\n              imageClick={this.imageClick}\n              id={car.id}\n              key={car.id}\n              image={car.image}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}